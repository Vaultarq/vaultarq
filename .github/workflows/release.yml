name: Release SDKs

# Workflow to publish SDKs to various package registries when a new version tag is pushed
on:
  push:
    tags:
      - 'v*.*.*'  # Run workflow on version tags, e.g. v1.0.0

jobs:
  release-node:
    name: Release Node.js SDK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdks/node-sdk
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release-python:
    name: Release Python SDK
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: sdks/python-sdk
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  release-rust:
    name: Release Rust SDK
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: sdks/rust-sdk
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      # Add git config for potential commits
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Cargo publish dependencies
        run: cargo install cargo-edit
      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: Publish to crates.io with allow-dirty flag
        run: cargo publish --allow-dirty
      - name: Commit Cargo.lock changes if needed
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            cd ../..
            git add sdks/rust-sdk/Cargo.lock
            git commit -m "Update Cargo.lock after publishing to crates.io [skip ci]"
            git push
          fi

  create-release:
    name: Create GitHub Release
    needs: [release-node, release-python, release-rust]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - name: Extract version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Get release notes
        id: release_notes
        run: |
          if [ -f RELEASE_NOTES.md ]; then
            # Use the pre-generated release notes if available
            RELEASE_NOTES=$(cat RELEASE_NOTES.md)
          else
            # Extract notes from CHANGELOG.md for this version
            RELEASE_NOTES=$(awk -v version="$VERSION" '
              BEGIN { found=0; output=0; }
              /^## \['"$VERSION"'\]/ { found=1; output=1; }
              /^## \[[0-9]+\.[0-9]+\.[0-9]+\]/ && !/^## \['"$VERSION"'\]/ { if (found) output=0; }
              { if (output) print; }
            ' CHANGELOG.md)
            
            # Add package links
            RELEASE_NOTES="${RELEASE_NOTES}
            
            ## Available Packages
            
            - **Node.js**: \`npm install vaultarq-node@$VERSION\`
            - **Python**: \`pip install vaultarq==$VERSION\`
            - **Rust**: Add \`vaultarq = \"$VERSION\"\` to your \`Cargo.toml\`
            - **Go**: \`go get github.com/Vaultarq/vaultarq/sdks/go-sdk@v$VERSION\`"
          fi
          echo "NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: ${{ env.NOTES }}
          draft: false
          prerelease: false 